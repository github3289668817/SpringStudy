AOP：面向切面编程
AOP底层实现：基于JDK的动态代理和基于Cglib的动态代理

Target（目标对象）：代理的目标对象
Proxy（代理）：一个类被AOP织入增强后，就产生一个结果代理类
Joinpoint（连接点）：指那些被拦截到的点，在Spring中这些点指的是方法，因为Spring只支持方法类型的连接点。即可以被增强的方法叫做连接点。
Pointcut（切入点）：指我们要对哪些Joinpoint进行拦截的定义
Advice（通知/增强）：指拦截到Joinpoint之后所要做的事情就是通知
Aspect（切面）：切入点和通知的结合
Weaving（织入）：指把增强应用到目标对象来创建新的代理对象的过程，Spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入

AOP开发明确的事项：
1.编写核心业务代码（目标类的目标方法）
2.编写切面类，切面类中有通知（增强功能方法）
3.在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合

AOP的技术实现的内容：Spring框架监控切入点方法的执行。一旦监控到切入点方法被执行，使用代理机制，动态创建目标对象的代理对象，根据通知类型，在dialing对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行

AOP底层使用哪种代理方式：在Spring中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方法

